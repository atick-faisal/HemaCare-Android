plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
    id("com.google.dagger.hilt.android")
    id("org.jetbrains.kotlin.kapt")
    id("com.google.devtools.ksp") version "1.7.20-1.0.8"
}

android {
    def date = new Date()
    def formattedDate = date.format("dd_MM_yyyy_hh_mm_a")

    namespace "dev.atick.jetpack"
    compileSdk rootProject.ext.compile_sdk_version

    defaultConfig {
        applicationId "dev.atick.hema.care"
        minSdk rootProject.ext.min_sdk_version
        targetSdk rootProject.ext.compile_sdk_version
        versionCode rootProject.ext.version_code
        versionName rootProject.ext.version_name
    }

    buildTypes {
        debug {
            applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName =
                            "${rootProject.name.replace(" ", "_") + "_"}" +
                                    "${variant.buildType.name + "_v"}" +
                                    "${variant.versionName + "_"}" +
                                    "${formattedDate}.apk"
                }
            }
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"),
                    "proguard-rules.pro"

            applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName =
                            "${rootProject.name.replace(" ", "_") + "_"}" +
                                    "${variant.buildType.name + "_v"}" +
                                    "${variant.versionName + "_"}" +
                                    "${formattedDate}.apk"
                }
            }
        }
    }

    applicationVariants.all { variant ->
        kotlin.sourceSets {
            getByName(variant.name) {
                kotlin.srcDir("build/generated/ksp/${variant.name}/kotlin")
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"

        freeCompilerArgs = freeCompilerArgs + [
                "-opt-in=kotlin.RequiresOptIn",
                // Enable experimental coroutines APIs, including Flow
                "-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi",
                "-opt-in=kotlinx.coroutines.FlowPreview",
                "-opt-in=kotlin.Experimental",
        ]
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion rootProject.ext.compose_compiler_version
    }

    packagingOptions {
        resources {
            excludes += "/META-INF/{AL2.0,LGPL2.1}"
        }
    }
}

dependencies {
    implementation project(path: ":core")

    // ... Jetpack Compose
    implementation("androidx.compose.ui:ui")
    implementation("androidx.compose.material3:material3")
    implementation("androidx.compose.foundation:foundation")
    implementation("androidx.compose.ui:ui-tooling-preview")
    implementation("androidx.compose.material:material-icons-core")
    implementation("androidx.compose.material:material-icons-extended")
    implementation("androidx.compose.material3:material3-window-size-class")
    implementation("androidx.compose.runtime:runtime-livedata")
    debugImplementation("androidx.compose.ui:ui-tooling")
    implementation(platform("androidx.compose:compose-bom:${compose_version}"))
    implementation("androidx.activity:activity-compose:$activity_compose_version")

    // ... Lifecycle
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version")
    implementation("androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycle_version")
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version")
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version")
    implementation("androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version")
    implementation("androidx.lifecycle:lifecycle-common-java8:$lifecycle_version")
    implementation("androidx.lifecycle:lifecycle-service:$lifecycle_version")
    implementation("androidx.lifecycle:lifecycle-process:$lifecycle_version")

    // ... Navigation
    implementation("io.github.raamcosta.compose-destinations:core:$nav_version")
    ksp("io.github.raamcosta.compose-destinations:ksp:$nav_version")

    // ... Splash Screen
    implementation("androidx.core:core-splashscreen:$splash_screen_version")

    // ... Lottie
    implementation("com.airbnb.android:lottie:$lottie_version")

    // ... Smart Care
    implementation files("libs/scolib-2.1.0.aar")

    // ... Dagger-Hilt
    implementation("com.google.dagger:hilt-android:$hilt_version")
    kapt("com.google.dagger:hilt-android-compiler:$hilt_version")
}

kapt {
    correctErrorTypes true
}